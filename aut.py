import sqlite3
import random
import smtplib
import pyotp
import qrcode
import requests
from flask import Flask, render_template, request, redirect, session, url_for
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

app = Flask(__name__)
app.secret_key = "supersecretkey"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    login TEXT UNIQUE, 
                    email TEXT UNIQUE, 
                    password TEXT, 
                    phone TEXT UNIQUE,
                    totp_secret TEXT,
                    confirmed INTEGER DEFAULT 0)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def is_valid_password(password):
    import re
    return (len(password) >= 8 and 
            any(char.isupper() for char in password) and 
            any(char.isdigit() for char in password) and 
            any(char in "@#$%^&+=" for char in password))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
def is_valid_email(email):
    return email.endswith("@gmail.com")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    import re
    return bool(re.fullmatch(r"(\+7|8)7\d{9}", phone))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ Email
def send_email(email, code):
    sender_email = "alimzhanbaizhanov22@gmail.com"  
    sender_password = "fxqk bxhu xllk sulj"  # –£–±–µ—Ä–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
    subject = "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    message = f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}"

    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = email
    msg["Subject"] = subject
    msg.attach(MIMEText(message, "plain", "utf-8"))

    try:
        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –Ω–∞ {email} —Å –∫–æ–¥–æ–º: {code}")  # –î–æ–±–∞–≤–∏–ª print()
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, email, msg.as_string())
        server.quit()
        print("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Email: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É



# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def home():
    if "user" in session:
        return render_template("home.html", user=session["user"])
    return render_template("home.html")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ —Å MFA
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        login = request.form.get("login")
        password = request.form.get("password")

        cursor.execute("SELECT * FROM users WHERE login=? AND password=?", (login, password))
        user = cursor.fetchone()

        if user:
            session["user"] = login
            session["totp_secret"] = user[5]
            return redirect(url_for("mfa_select"))
        else:
            return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"

    return render_template("login.html")

# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ MFA
@app.route("/mfa_select", methods=["GET", "POST"])
def mfa_select():
    if "user" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        method = request.form.get("mfa_method")
        session["mfa_method"] = method
        
        if method == "sms":
            session["mfa_code"] = str(random.randint(100000, 999999))
            print(f"[DEBUG] –ö–æ–¥ –ø–æ SMS: {session['mfa_code']}")
            return redirect(url_for("mfa_verify"))
        elif method == "totp":
            return redirect(url_for("mfa_totp_setup"))
    
    return render_template("mfa_select.html")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Authenticator
@app.route("/mfa_totp_setup")
def mfa_totp_setup():
    if "user" not in session:
        return redirect(url_for("login"))

    # –ü–æ–ª—É—á–∞–µ–º TOTP-–∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    cursor.execute("SELECT totp_secret FROM users WHERE login=?", (session["user"],))
    totp_secret = cursor.fetchone()[0]

    if not totp_secret:
        return "–û—à–∏–±–∫–∞: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç TOTP-–∫–ª—é—á–∞!"

    # –°–æ–∑–¥–∞—ë–º Google Authenticator TOTP
    totp = pyotp.TOTP(totp_secret)
    uri = totp.provisioning_uri(name=session["user"], issuer_name="FlaskApp")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    import qrcode
    img = qrcode.make(uri)
    img.save("static/qr.png")

    return render_template("mfa_totp.html", qr_code="/static/qr.png")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ MFA
@app.route("/mfa_verify", methods=["GET", "POST"])
def mfa_verify():
    if "user" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        code = request.form.get("code")
        method = session.get("mfa_method")

        if method == "sms" and code == session.get("mfa_code"):
            return redirect(url_for("dashboard"))
        elif method == "totp":
            totp = pyotp.TOTP(session["totp_secret"])
            if totp.verify(code):
                return redirect(url_for("dashboard"))
    
    return render_template("mfa_verify.html")

# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@app.route("/logout")
def logout():
    session.pop("user", None)
    return redirect(url_for("home"))

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        login = request.form["login"]
        email = request.form["email"]
        password = request.form["password"]
        phone = request.form["phone"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞, –ø–æ—á—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        cursor.execute("SELECT * FROM users WHERE login=? OR email=? OR phone=?", (login, email, phone))
        if cursor.fetchone():
            return "–û—à–∏–±–∫–∞: –õ–æ–≥–∏–Ω, –ø–æ—á—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π TOTP-—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        totp_secret = pyotp.random_base32()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Email
        code = random.randint(100000, 999999)
        session["confirmation_code"] = code
        session["user_data"] = (login, email, password, phone, totp_secret)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ Email
        send_email(email, code)

        return redirect(url_for("confirm"))

    return render_template("register.html")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("login"))

    return render_template("dashboard.html")


@app.route("/confirm", methods=["GET", "POST"])
def confirm():
    if request.method == "POST":
        code = request.form["code"]
        if "confirmation_code" in session and int(code) == session["confirmation_code"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            login, email, password, phone, totp_secret = session["user_data"]
            cursor.execute("INSERT INTO users (login, email, password, phone, totp_secret, confirmed) VALUES (?, ?, ?, ?, ?, ?)",
                           (login, email, password, phone, totp_secret, 1))
            conn.commit()

            session.pop("confirmation_code", None)
            session.pop("user_data", None)

            return redirect(url_for("home"))
        else:
            return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

    return render_template("confirm.html")




if __name__ == "__main__":
    app.run(debug=True)
